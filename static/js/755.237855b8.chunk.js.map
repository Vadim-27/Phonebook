{"version":3,"file":"static/js/755.237855b8.chunk.js","mappings":"gOAkBA,EAhBc,CACZ,CACEA,IAAIC,EAAAA,EAAAA,MACJC,KAAM,OACNC,KAAM,IACNC,SAAS,GAEX,CACEJ,IAAIC,EAAAA,EAAAA,MACJC,KAAM,WACNC,KAAM,YACNC,SAAS,I,UCZb,EAAuB,qBAAvB,EAAmD,qBCAnD,EAA0B,4BAA1B,EAA6D,yB,SCc7D,EAZmB,WACf,OACE,iBAAKC,UAAWC,EAAhB,WACE,SAAC,KAAD,CAASD,UAAWC,EAAUC,GAAG,YAAjC,uBAGA,SAAC,KAAD,CAASF,UAAWC,EAAUC,GAAG,SAAjC,qBAKP,E,UCbD,EAA0B,4BAA1B,EAAyG,+BCsBzG,EAfmB,WACf,IAAMC,GAAWC,EAAAA,EAAAA,MACTC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IAArBF,KAIR,OACE,iBAAKL,UAAWC,EAAhB,UACGI,EADH,KAEE,mBAAQL,UAAWC,EAAgBO,QANtB,WACbL,GAASM,EAAAA,EAAAA,MACZ,EAIG,sBAKP,ECWD,EAvBe,WACb,IAAMC,GAAUJ,EAAAA,EAAAA,IAAYK,EAAAA,IAGnBC,GAFcF,EAAgDG,EAAtCA,EAAAA,QAAa,SAAAC,GAAI,OAAKA,EAAKf,OAAV,KAEhBgB,KAAI,gBAAGpB,EAAH,EAAGA,GAAIE,EAAP,EAAOA,KAAMC,EAAb,EAAaA,KAAb,OACjC,yBACE,SAAC,KAAD,CAASE,UAAWC,EAAUC,GAAIJ,EAAlC,SACGD,KAFIF,EADwB,IAQpC,OACE,iBAAKK,UAAWC,EAAhB,WACE,eAAID,UAAWC,EAAf,SAA0BW,KAExBF,IAAW,SAAC,EAAD,IACZA,IAAS,SAAC,EAAD,KACV,SAAC,KAAD,MAGP,C,wGC/BM,IAAMC,EAAc,SAAC,GAAD,SAAGK,KAAgBN,OAAnB,EACdO,EAAU,SAAC,GAAc,IAAZD,EAAW,EAAXA,KAEtB,MAAO,CAAEN,QADkBM,EAAnBN,QACUQ,MADSF,EAAVE,MAEpB,EACYX,EAAU,SAAC,GAAD,SAAGS,KAAgBG,IAAnB,C,wDCJhB,IAkBIvB,EAAS,eAACwB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC7B,EAAI8B,GAWvD,OARE9B,IAFF8B,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["modules/Navbar/items.js","webpack://react-homework-template/./src/modules/Navbar/navbar.module.css?e452","webpack://react-homework-template/./src/modules/Navbar/NavbarAuth/navbarAuth.module.css?542c","modules/Navbar/NavbarAuth/NavbarAuth.jsx","webpack://react-homework-template/./src/modules/Navbar/NavbarUser/navbarUser.module.css?1761","modules/Navbar/NavbarUser/NavbarUser.jsx","modules/Navbar/Navbar.jsx","redux/auth/auth-selectors.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { nanoid } from \"nanoid\";\n\nconst items = [\n  {\n    id: nanoid(),\n    text: 'Home',\n    link: '/',\n    private: false,\n  },\n  {\n    id: nanoid(),\n    text: 'Contacts',\n    link: '/contacts',\n    private: true,\n  },\n\n];\n\nexport default items;","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"navbar_menu__rxhN3\",\"link\":\"navbar_link__2CmhR\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"navbarAuth_wrapper__fGFHj\",\"link\":\"navbarAuth_link__gsDb3\"};","import { NavLink } from \"react-router-dom\";\nimport css from \"./navbarAuth.module.css\"\n\nconst NavbarAuth = () => {\n    return (\n      <div className={css.wrapper}>\n        <NavLink className={css.link} to=\"/register\">\n          Register\n        </NavLink>\n        <NavLink className={css.link} to=\"/login\">\n          Login\n        </NavLink>\n      </div>\n    );\n}\nexport default NavbarAuth;","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"navbarUser_wrapper__Cgqey\",\"userLog\":\"navbarUser_userLog__hR2XU\",\"btnUserLog\":\"navbarUser_btnUserLog__BRd7S\"};","import { useSelector, useDispatch } from \"react-redux\";\n\nimport { logout } from \"redux/auth/auth-operations\";\nimport { getUser } from \"redux/auth/auth-selectors\";\n\nimport css from \"./navbarUser.module.css\"\n\n\nconst NavbarUser = () => {\n    const dispatch = useDispatch();\n    const { name } = useSelector(getUser);\n    const onLogout = () => {\n        dispatch(logout());\n    }\n    return (\n      <div className={css.wrapper}>\n        {name},\n        <button className={css.btnUserLog} onClick={onLogout}>\n          Logout\n        </button>\n      </div>\n    );\n}\nexport default NavbarUser;","import { NavLink } from \"react-router-dom\";\nimport { Outlet } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nimport items from \"./items\";\nimport { isUserLogin } from \"redux/auth/auth-selectors\";\nimport css from \"./navbar.module.css\"\nimport NavbarAuth from \"./NavbarAuth/NavbarAuth\";\nimport NavbarUser from \"./NavbarUser/NavbarUser\";\n\nconst Navbar = () => {\n  const isLogin = useSelector(isUserLogin);\n  const filteredItems = !isLogin ? items.filter(item => !item.private) : items;\n  \n     const elements = filteredItems.map(({ id, text, link }) => (\n       <li key={id}>\n         <NavLink className={css.link} to={link}>\n           {text}\n         </NavLink>\n       </li>\n     ));\n   \n    return (\n      <div className={css.menu}>\n        <ul className={css.menu}>{elements}</ul>\n       \n        {!isLogin && <NavbarAuth />}\n        {isLogin&&<NavbarUser/>}\n        <Outlet />\n      </div>\n    ); \n}\n\nexport default Navbar;","export const isUserLogin = ({ auth }) => auth.isLogin;\nexport const getAuth = ({ auth }) => {\n    const { isLogin, token } = auth;\n    return { isLogin, token };\n}\nexport const getUser = ({ auth }) => auth.user;\n\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["id","nanoid","text","link","private","className","css","to","dispatch","useDispatch","name","useSelector","getUser","onClick","logout","isLogin","isUserLogin","elements","items","item","map","auth","getAuth","token","user","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}